package prova;

/* The following code was generated by JFlex 1.6.0 */

import static prova.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/sherl/OneDrive/Documents/NetBeansProjects/Prova/src/prova/especificacao.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\26\1\70\1\70\1\26\22\0\1\31\1\0\1\24"+
    "\5\0\1\37\1\37\1\30\1\27\1\37\1\30\1\23\1\30\12\4"+
    "\1\0\1\37\1\33\1\22\1\32\2\0\1\41\1\42\1\56\1\53"+
    "\1\46\1\63\1\62\1\65\1\44\1\57\1\1\1\47\1\50\1\54"+
    "\1\51\1\55\1\1\1\43\1\52\1\45\1\60\1\61\1\1\1\64"+
    "\1\1\1\66\1\40\1\25\1\40\1\3\1\2\1\3\1\6\1\1"+
    "\1\15\1\21\1\34\1\12\1\1\1\16\1\7\2\1\1\13\1\5"+
    "\1\10\1\14\2\1\1\17\1\35\1\11\1\1\1\20\1\36\3\1"+
    "\1\37\1\67\1\37\7\0\1\70\u1fa2\0\1\70\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\6\2\1\4\1\5\1\1"+
    "\1\6\2\7\2\10\14\2\1\0\2\2\1\11\4\2"+
    "\1\12\1\0\1\13\1\0\1\14\1\10\6\2\1\15"+
    "\5\2\1\15\5\2\1\16\1\2\1\17\3\2\1\13"+
    "\5\2\1\0\14\2\1\20\1\21\4\2\1\0\15\2"+
    "\1\0\10\2\1\0\2\2\1\0\3\2\2\0\1\2"+
    "\1\0\2\2\1\0\1\2\2\0\1\2\14\0\1\15"+
    "\25\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\71\0\71\0\u023a\0\u0273\0\u02ac\0\71"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\162\0\u06ae\0\u06e7\0\u0720\0\u0759\0\162\0\u023a"+
    "\0\71\0\u0792\0\71\0\71\0\u07cb\0\u0804\0\u083d\0\u0876"+
    "\0\u08af\0\u08e8\0\162\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0603\0\u0b94"+
    "\0\162\0\u0bcd\0\u0c06\0\u0c3f\0\u023a\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\162"+
    "\0\162\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\71\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\3\1\6\2\3"+
    "\1\7\2\3\1\10\2\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\2\1\16\1\17\1\20\1\16\1\21\1\22"+
    "\1\23\1\3\1\24\2\14\1\25\4\3\1\26\1\3"+
    "\1\27\1\30\1\31\1\32\2\3\1\33\1\3\1\34"+
    "\1\35\1\3\1\36\3\3\1\16\73\0\21\3\3\0"+
    "\1\3\6\0\3\3\1\0\27\3\6\0\1\4\16\0"+
    "\1\37\46\0\5\3\1\40\13\3\3\0\1\3\6\0"+
    "\3\3\1\0\27\3\3\0\7\3\1\41\1\3\1\42"+
    "\7\3\3\0\1\3\6\0\3\3\1\0\27\3\3\0"+
    "\12\3\1\43\1\44\5\3\3\0\1\3\6\0\3\3"+
    "\1\0\27\3\3\0\15\3\1\45\3\3\3\0\1\3"+
    "\6\0\3\3\1\0\27\3\3\0\13\3\1\46\5\3"+
    "\3\0\1\3\6\0\3\3\1\0\27\3\3\0\13\3"+
    "\1\47\5\3\3\0\1\3\6\0\3\3\1\0\27\3"+
    "\2\0\24\50\1\51\1\52\1\0\42\50\26\0\1\16"+
    "\2\0\1\16\35\0\1\16\30\0\1\53\63\0\1\54"+
    "\70\0\1\54\7\0\1\54\37\0\12\3\1\55\6\3"+
    "\3\0\1\3\6\0\3\3\1\0\27\3\3\0\15\3"+
    "\1\56\3\3\3\0\1\3\6\0\3\3\1\0\27\3"+
    "\3\0\21\3\3\0\1\3\6\0\3\3\1\0\2\3"+
    "\1\57\2\3\1\60\14\3\1\61\4\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\10\3\1\62\14\3"+
    "\1\63\1\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\6\3\1\64\2\3\1\65\15\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\3\3\1\66\10\3"+
    "\1\67\12\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\11\3\1\70\15\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\6\3\1\71\20\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\3\3\1\72\5\3"+
    "\1\73\15\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\14\3\1\74\12\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\1\3\1\75\25\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\4\3\1\76\22\3"+
    "\6\0\1\77\65\0\6\3\1\100\12\3\3\0\1\3"+
    "\6\0\3\3\1\0\27\3\3\0\10\3\1\101\10\3"+
    "\3\0\1\3\6\0\3\3\1\0\27\3\3\0\13\3"+
    "\1\102\5\3\3\0\1\3\6\0\3\3\1\0\27\3"+
    "\3\0\16\3\1\47\2\3\3\0\1\3\6\0\3\3"+
    "\1\0\27\3\3\0\5\3\1\103\13\3\3\0\1\3"+
    "\6\0\3\3\1\0\27\3\3\0\6\3\1\104\12\3"+
    "\3\0\1\3\6\0\3\3\1\0\27\3\2\0\24\50"+
    "\1\105\1\52\1\0\42\50\1\0\21\3\3\0\1\3"+
    "\6\0\1\3\1\106\1\3\1\0\27\3\3\0\6\3"+
    "\1\107\12\3\3\0\1\3\6\0\3\3\1\0\27\3"+
    "\3\0\21\3\3\0\1\3\6\0\3\3\1\0\3\3"+
    "\1\110\23\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\3\3\1\111\23\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\3\3\1\112\23\3\3\0\21\3"+
    "\3\0\1\3\3\0\1\113\2\0\3\3\1\0\27\3"+
    "\3\0\21\3\3\0\1\3\6\0\3\3\1\0\13\3"+
    "\1\114\13\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\12\3\1\115\14\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\13\3\1\116\13\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\13\3\1\117\13\3"+
    "\3\0\21\3\3\0\1\3\6\0\3\3\1\0\10\3"+
    "\1\120\16\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\16\3\1\121\10\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\6\3\1\122\20\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\14\3\1\123\12\3"+
    "\3\0\21\3\3\0\1\3\6\0\3\3\1\0\4\3"+
    "\1\124\22\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\7\3\1\125\16\3\1\126\3\0\21\3\3\0"+
    "\1\3\6\0\3\3\1\0\7\3\1\127\17\3\3\0"+
    "\7\3\1\130\11\3\3\0\1\3\6\0\3\3\1\0"+
    "\27\3\3\0\5\3\1\41\13\3\3\0\1\3\6\0"+
    "\3\3\1\0\27\3\3\0\16\3\1\101\2\3\3\0"+
    "\1\3\6\0\3\3\1\0\27\3\3\0\20\3\1\131"+
    "\3\0\1\3\6\0\3\3\1\0\27\3\3\0\21\3"+
    "\3\0\1\3\6\0\1\42\2\3\1\0\27\3\3\0"+
    "\12\3\1\132\6\3\3\0\1\3\6\0\3\3\1\0"+
    "\27\3\3\0\21\3\3\0\1\3\6\0\3\3\1\0"+
    "\4\3\1\133\22\3\3\0\21\3\3\0\1\3\6\0"+
    "\3\3\1\0\1\3\1\134\25\3\3\0\21\3\3\0"+
    "\1\3\6\0\3\3\1\0\20\3\1\135\6\3\60\0"+
    "\1\136\13\0\21\3\3\0\1\3\6\0\3\3\1\0"+
    "\4\3\1\137\22\3\3\0\21\3\3\0\1\3\6\0"+
    "\3\3\1\0\5\3\1\140\21\3\3\0\21\3\3\0"+
    "\1\3\6\0\3\3\1\0\6\3\1\141\20\3\3\0"+
    "\21\3\3\0\1\3\6\0\3\3\1\0\6\3\1\63"+
    "\20\3\3\0\21\3\3\0\1\3\6\0\3\3\1\0"+
    "\1\3\1\142\25\3\3\0\21\3\3\0\1\3\6\0"+
    "\3\3\1\0\3\3\1\72\23\3\3\0\21\3\3\0"+
    "\1\3\6\0\3\3\1\0\12\3\1\143\14\3\3\0"+
    "\21\3\3\0\1\3\6\0\3\3\1\0\5\3\1\144"+
    "\21\3\3\0\21\3\3\0\1\3\6\0\3\3\1\0"+
    "\13\3\1\145\13\3\3\0\21\3\3\0\1\3\6\0"+
    "\3\3\1\0\11\3\1\146\15\3\3\0\21\3\3\0"+
    "\1\3\6\0\3\3\1\0\4\3\1\147\22\3\3\0"+
    "\21\3\3\0\1\3\6\0\3\3\1\0\5\3\1\150"+
    "\21\3\3\0\21\3\3\0\1\3\6\0\1\47\2\3"+
    "\1\0\27\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\3\3\1\151\23\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\21\3\1\152\5\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\15\3\1\153\11\3"+
    "\53\0\1\154\20\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\1\3\1\63\25\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\3\3\1\155\23\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\14\3\1\153\12\3"+
    "\3\0\21\3\3\0\1\3\6\0\3\3\1\0\5\3"+
    "\1\156\21\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\16\3\1\157\10\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\1\3\1\160\4\3\1\161\20\3"+
    "\3\0\21\3\3\0\1\3\6\0\3\3\1\0\1\3"+
    "\1\162\25\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\3\3\1\163\23\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\11\3\1\63\15\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\3\3\1\164\23\3"+
    "\3\0\21\3\3\0\1\3\3\0\1\165\2\0\3\3"+
    "\1\0\27\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\6\3\1\166\20\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\1\3\1\167\25\3\56\0\1\170"+
    "\15\0\21\3\3\0\1\3\6\0\3\3\1\0\1\3"+
    "\1\160\25\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\11\3\1\171\15\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\6\3\1\172\20\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\3\3\1\63\23\3"+
    "\3\0\21\3\3\0\1\3\6\0\3\3\1\0\14\3"+
    "\1\173\12\3\3\0\21\3\3\0\1\3\3\0\1\174"+
    "\2\0\3\3\1\0\27\3\3\0\21\3\3\0\1\3"+
    "\3\0\1\175\2\0\3\3\1\0\27\3\3\0\21\3"+
    "\3\0\1\3\6\0\3\3\1\0\11\3\1\176\15\3"+
    "\47\0\1\177\24\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\12\3\1\200\14\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\3\3\1\201\23\3\61\0\1\202"+
    "\12\0\21\3\3\0\1\3\6\0\3\3\1\0\3\3"+
    "\1\114\23\3\3\0\21\3\3\0\1\3\6\0\3\3"+
    "\1\0\14\3\1\203\12\3\3\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\13\3\1\147\13\3\60\0\1\204"+
    "\62\0\1\205\21\0\1\3\1\206\17\3\3\0\1\3"+
    "\6\0\3\3\1\0\27\3\43\0\1\207\30\0\21\3"+
    "\3\0\1\3\3\0\1\210\2\0\3\3\1\0\27\3"+
    "\3\0\21\3\3\0\1\3\3\0\1\211\2\0\3\3"+
    "\1\0\27\3\62\0\1\212\11\0\21\3\3\0\1\3"+
    "\6\0\3\3\1\0\5\3\1\117\21\3\53\0\1\213"+
    "\60\0\1\214\2\0\1\215\25\0\21\3\3\0\1\3"+
    "\3\0\1\216\2\0\3\3\1\0\27\3\44\0\1\217"+
    "\101\0\1\220\72\0\1\221\67\0\1\222\64\0\1\223"+
    "\104\0\1\224\60\0\1\224\67\0\1\225\63\0\1\226"+
    "\63\0\1\227\100\0\1\230\64\0\1\231\67\0\1\232"+
    "\75\0\1\233\66\0\1\234\52\0\1\235\102\0\1\223"+
    "\76\0\1\236\67\0\1\237\22\0\1\240\127\0\1\223"+
    "\76\0\1\241\52\0\1\174\110\0\1\223\101\0\1\242"+
    "\52\0\1\243\67\0\1\244\107\0\1\245\66\0\1\246"+
    "\51\0\1\247\104\0\1\237\71\0\1\250\53\0\1\237"+
    "\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\2\11\3\1\1\11\16\1\1\0"+
    "\10\1\1\0\1\11\1\0\2\11\36\1\1\0\22\1"+
    "\1\0\15\1\1\0\10\1\1\0\2\1\1\0\3\1"+
    "\2\0\1\1\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\14\0\1\11\25\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private void imprimir(String token, String lexema){
        System.out.println(lexema + " -> Classicicacao lexica: " + token);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { imprimir("<<< CARACTER INVALIDO!!! >>> ", yytext()); return ERROR;
          }
        case 18: break;
        case 2: 
          { imprimir("VARIAVEL : ", yytext()); return NOME_VARIAVEL;
          }
        case 19: break;
        case 3: 
          { imprimir("NUMERO INTEIRO " , yytext()); return INTEIRO;
          }
        case 20: break;
        case 4: 
          { imprimir("ATRIBUICAO ", yytext()); return ATRIBUICAO;
          }
        case 21: break;
        case 5: 
          { imprimir("SIMBOLOS ESPECIFICO " , yytext()); return SIMBOLOESPECIAL;
          }
        case 22: break;
        case 6: 
          { return BRANCO;
          }
        case 23: break;
        case 7: 
          { imprimir("OPERADOR ARITMETICO " , yytext()); return OPERADORARITIMETICO;
          }
        case 24: break;
        case 8: 
          { imprimir("OPERADOR COMPARATIVO " , yytext()); return OPERADORCOMPARATIVO;
          }
        case 25: break;
        case 9: 
          { imprimir("OPERADOR LOGICOS " , yytext()); return OPERADORLOGICO;
          }
        case 26: break;
        case 10: 
          { imprimir("LOOP DE REPETICAO ", yytext()); return LOOPDEREPETICAO;
          }
        case 27: break;
        case 11: 
          { imprimir("LITERAL " , yytext()); return CONSTANTE;
          }
        case 28: break;
        case 12: 
          { imprimir("INCREMENTO ", yytext()); return INCREMENTO;
          }
        case 29: break;
        case 13: 
          { imprimir("PALAVRA-CHAVE " , yytext()); return PALAVRACHAVE;
          }
        case 30: break;
        case 14: 
          { imprimir("NUMERO DECIMAL " , yytext()); return DECIMAL;
          }
        case 31: break;
        case 15: 
          { imprimir("TIPO VARIAVEL ", yytext()); return TIPOVARIAVEL;
          }
        case 32: break;
        case 16: 
          { imprimir("PALAVRA RESERVADA ", yytext()); return PALAVRARESERVADA;
          }
        case 33: break;
        case 17: 
          { imprimir("RETORNO DE FUNCAO ", yytext()); return RETORNODEFUNCAO;
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
